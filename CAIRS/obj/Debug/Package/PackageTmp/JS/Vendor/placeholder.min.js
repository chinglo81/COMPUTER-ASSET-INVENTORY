(function ($) {
	// @todo Document this.
	$.extend($, {
		placeholder: {
			browser_supported: function () {
				return false;
			},
			shim: function (opts) {
				var config = {
					color: '#888',
					cls: 'placeholder',
					selector: 'input[placeholder]:not([noshim]), textarea[placeholder]:not([noshim])'
				};
				$.extend(config, opts);
				return !this.browser_supported() && $(config.selector)._placeholder_shim(config);
			}
		}
	});

	$.extend($.fn, {
		_placeholder_shim: function (config) {
			function calcPositionCss(target) {
				var op = $(target).offsetParent().offset();
				var ot = $(target).offset();

				return {
					top: ot.top - op.top,
					left: ot.left - op.left,
					width: $(target).width()
				};
			}
			function adjustToResizing(label) {
				var $target = label.data('target');
				if (typeof $target !== "undefined") {
					label.css(calcPositionCss($target));
					$(window).one("resize", function () { adjustToResizing(label); });
				}
			}
			return this.each(function () {
				var $this = $(this);

				if (1 == 1) {

					if ($this.data('placeholder')) {
						var $ol = $this.data('placeholder');
						$ol.css(calcPositionCss($this));
						return true;
					}

					var possible_line_height = {};
					if (!$this.is('textarea') && $this.css('height') != 'auto') {
						possible_line_height = { lineHeight: $this.css('height'), whiteSpace: 'nowrap' };
					}

					var isBorderBox = ($this.css('box-sizing') === 'border-box');
					var isTextarea = $this.is('textarea');

					var ol = $('<label />')
					  .text($this.attr('placeholder'))
					  .addClass(config.cls)
					  .css($.extend({
					  	position: 'absolute',
					  	display: 'inline',
					  	'float': 'none',
					  	overflow: 'hidden',
					  	textAlign: 'left',
					  	color: '#acb6c0',
					  	cursor: 'text',
					  	paddingTop: !isTextarea && isBorderBox ? '0' : parseInt($this.css('padding-top')) + 1 + 'px',
					  	paddingRight: parseInt($this.css('padding-right')) + 1 + 'px',
					  	paddingBottom: !isTextarea && isBorderBox ? '0' : parseInt($this.css('padding-bottom')) + 1 + 'px',
					  	paddingLeft: parseInt($this.css('padding-left')) + 1 + 'px',
					  	fontSize: $this.css('font-size'),
					  	fontFamily: $this.css('font-family'),
					  	fontStyle: $this.css('font-style'),
					  	fontWeight: $this.css('font-weight'),
					  	textTransform: $this.css('text-transform'),
					  	backgroundColor: 'transparent',
					  	zIndex: 99
					  }, possible_line_height))
					  .css(calcPositionCss(this))
					  .attr('for', this.id)
					  .data('target', $this)
					  .click(function () {
					  	if (!$(this).data('target').is(':disabled')) {
					  		$(this).data('target').focus();
					  	}
					  })
					  .insertBefore(this);
					$this
						.data('placeholder', ol)
						.on('focus', function () {
							if ($('#' + $(ol[0]).attr('for')).prop('nodeName') != "TEXTAREA")
								ol.addClass('placeholder-min');
						})
						.on('keydown', function () {
							if ($('#' + $(ol[0]).attr('for')).prop('nodeName') == "TEXTAREA") {
								ol.hide();
							} else {
								ol.addClass('placeholder-min');
							}
						})
						.on('keyup', function () {
							if ($this.val() == '') {
								if ($('#' + $(ol[0]).attr('for')).prop('nodeName') == "TEXTAREA") {
									ol.show();
								} else {
									ol.removeClass('placeholder-min');
								}
							}
						})
						.on('blur change', function () {
							if ($('#' + $(ol[0]).attr('for')).prop('nodeName') == "TEXTAREA") {
								$this.val().length ? ol.hide() : ol.show();
							} else {
								$this.val().length ? ol.addClass('placeholder-min') : ol.removeClass('placeholder-min');
							}
						})
						.triggerHandler('blur');
					$this.removeAttr('placeholder');
					$(window).one("resize", function () { adjustToResizing(ol); });
				}
			});
		}
	});
})(jQuery);

jQuery(document).add(window).bind('ready load', function () {
	if (jQuery.placeholder) {
		jQuery.placeholder.shim();
	}
});
